#!/usr/bin/env ruby

require 'rubygems'
require 'bundler'
require 'erubis'

%w(lifx-protocol-rb structle).each do |lib|
  $LOAD_PATH << File.expand_path(File.join(File.dirname(__FILE__), "..", "..", lib, "lib"))
end

require 'lx/protocol'

def class_name(struct)
  struct.name.to_s.split('::').last
end

def constant(name)
  name.upcase
end

def field_entry(field)
  name = field.name
  if name == :key
    name = :auth_key # Key is a reserved name in BinData
  end

  if field.type == Structle::String
    "#{class_name(field.type).downcase} :#{name}, length: #{field.size}, trim_padding: true"
  elsif field.type == Structle::Bytes
    "string :#{name}, length: #{field.size}"
  elsif field.type < Structle::Enum
    "#{class_name(field.type.type).downcase} :#{name}"
  else
    "#{class_name(field.type).downcase} :#{name}"
  end
end

template = Erubis::Eruby.new(<<-ERB)
module LIFX
  module Protocol
    # @api private
    module <%= protocol_namespace %>
      <% enums.each do |enum| %>
      module <%= class_name(enum) %>
        <% enum.values.each do |name, value| %>
        <%= constant(name) %> = <%= value %>
        <% end %>
      end

      <% end %>
      <% structs.select { |s| s.visibility == :public }.each do |struct| %>
      class <%= class_name(struct) %> < Payload
        endian :little

        <% struct.fields.each do |name, field| %>
        <%= field_entry(field) %><%= field.comment ? " # \#{field.comment}" : '' %>
        <% end %>
      end

      <% end %>
    end
  end
end
ERB

protocol_folder = File.expand_path(File.join(File.dirname(__FILE__), "..", "lib", "lifx", "protocol"))
protocol_namespaces = %w(Device Light Sensor Wan Wifi)
protocol_namespaces.each do |protocol_namespace|
  structs = Structle.structs([:Lx, :Protocol, protocol_namespace.to_sym])
  enums = Structle.enums([:Lx, :Protocol, protocol_namespace.to_sym])
  File.open(File.join(protocol_folder, "#{protocol_namespace.downcase}.rb"), 'w') do |f|
    f.write(template.result(binding))
  end
end

template = Erubis::Eruby.new(<<-ERB)
# Generated code ahoy!
module LIFX
  module Protocol
    TYPE_ID_TO_CLASS = {
      <% mapping.each do |klass, id| %>
      <% next if klass.visibility == :private %>
      <%= id %> => <%= klass.to_s.sub('Lx::Protocol::', '') %>,
      <% end %>
    }

    CLASS_TO_TYPE_ID = {
      <% mapping.each do |klass, id| %>
      <% next if klass.visibility == :private %>
      <%= klass.to_s.sub('Lx::Protocol::', '') %> => <%= id %>,
      <% end %>
    }
  end
end
ERB

mapping = Lx::Protocol::TYPE
File.open(File.join(protocol_folder, "type.rb"), 'w') do |f|
  f.write(template.result(binding))
end
